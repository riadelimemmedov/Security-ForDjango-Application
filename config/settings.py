"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os

#!Using django-environ for secret credentials
import environ #=> or used alternative packages => python-decouple,also I am also a favorite .env package
env = environ.Env()
environ.Env.read_env()
#----------------------------------------------------------------------------------------------------------------------------------------------

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    #my application
    'secure',
    
    #thirdy party libraries
    'django_cleanup',
    'widget_tweaks',
    "crispy_forms",
    "crispy_bootstrap5",
    'captcha',
    'axes',# or used => https://github.com/jazzband/django-defender
    'admin_honeypot',
    
    #two factor authentication
    'django_otp',
    'django_otp.plugins.otp_static',
    'django_otp.plugins.otp_totp',
    'two_factor',
    
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django_otp.middleware.OTPMiddleware',#?2FA authentication middleware
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    #?django-auto-logout => or used <django-session-timeout> package
    'django_auto_logout.middleware.auto_logout',#auto_logout
    
    #?django-axes for brute-forces attacks
    'axes.middleware.AxesMiddleware',
]

#!Django Axes AUTHENTICATION_BACKENDS
AUTHENTICATION_BACKENDS = [
    # AxesStandaloneBackend should be the first backend in the AUTHENTICATION_BACKENDS list.
    'axes.backends.AxesStandaloneBackend',

    # Django ModelBackend is the default authentication backend.
    'django.contrib.auth.backends.ModelBackend',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                
                #?Add this,if you want to user session timeout redirect to login page
                'django_auto_logout.context_processors.auto_logout_client',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Baku'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR,'static')
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR,'media')

#!LOGIN_URL & LOGIN_REDIRECT_URL
LOGIN_URL = 'two_factor:login'#come from django-two-factor packages
LOGIN_REDIRECT_URL = 'secure:dashboardView'
LOGOUT_REDIRECT_URL = 'two_factor:login'

#!CrispyForms
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

#!Recaptcha
RECAPTCHA_PUBLIC_KEY = env('RECAPTCHA_PUBLIC_KEY')
RECAPTCHA_PRIVATE_KEY = env('RECAPTCHA_PRIVATE_KEY')

#!Django Auto LogOut Configuration
from datetime import timedelta
AUTO_LOGOUT = {
    'IDLE_TIME':timedelta(weeks=1),#for 1 day => 3600*24, if minute menation define this => 60
    'SESSION_TIME': timedelta(weeks=1),
    'REDIRECT_TO_LOGIN_IMMEDIATELY': True,
    'MESSAGE': 'The session has expired. Please login again to continue.',
}

#!Django Axes
AXES_FAILURE_LIMIT:3 #How many times a user can fail a login
AXES_COOLOFF_TIME:1 #Wait 2 hours before attempting to login
AXES_RESET_ON_SUCCESS = True #Reset failed login attempts,reset the number of failed attempts after one successful attempt,If True, a successful login will reset the number of failed logins.
AXES_LOCKOUT_TEMPLATE = 'secure/account-locked.html' #If set, specifies a URL to redirect to on lockout. If both AXES_LOCKOUT_TEMPLATE and AXES_LOCKOUT_URL are set, the template will be used.Add custom template on a failure.If user account has block,for show notifivation user used this templates


# Default primary key field type 
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#!SMTP Configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')


#*Deployment Settings
#?Protection against XSS attacks
# SECURE_BROWSER_XSS_FILTER = True #Protect XSS Attack
# SECURE_CONTENT_TYPE_NOSIFF = True #Protect MIME type attack. This is done for the purpose of determining an asset's file format.sunulan içeriğin tipi belirtilmediği durumlarda, tarayıcıların sayfa görüntülenmesinde en doğru yolu bulabilmek için, içeriği değerlendirmesi işlemidir.MIME sniffing is the practice of inspecting the content of a byte stream to attempt to deduce the file format of the data within it.

#?Session and Cokkie protection
#SESSION_COOKIE_SECURE=True #which means browsers may ensure that the cookie is only sent under an HTTPS connection.
#CSRF_COOKIE_SECURE=True #which means browsers may ensure that the cookie is only sent with an HTTPS connection.

#?SECURE_SSL_REDIRECT
#SECURE_SSL_REDIRECT=True #all non-HTTP requests are redirect to HTTPS

#?SECURE_HSTS_SECONDS
#SECURE_HSTS_SECONDS = 86400 #prevents browsers from connecting to your website with an insecure connection for the specified duration in seconds 
#HSTS stands for HTTP Strict Transport Security, it's a web security policy mechanism that forces web browsers to interact with websites only via secure HTTPS connections (and never HTTP). This helps to prevent protocol downgrade attacks and cookie hijacking

#?SECURE_HSTS_PRELOAD
#SECURE_HSTS_PRELOAD = True #in order to be submitted to Chrome's list of sites that are hardcoded as being HTTPS only.The preload directive is added to the HSTS header

#?SECURE_HSTS_INCLUDE_SUBDOMAINS
#SECURE_HSTS_INCLUDE_SUBDOMAINS=True #so a hacker can intercept and change requests performed over HTTP.Only Connect Site <HTTPS>

#~Look into a CSP(Contect Security Policiy)
#CSP => Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross-Site Scripting (XSS) and data injection attacks. #?https://larasec.substack.com/p/in-depth-content-security-policy
#ClickJacking => Clickjacking is an attack that tricks a user into clicking a webpage element which is invisible or disguised as another element. #?https://www.imperva.com/learn/application-security/clickjacking/

#Integrate CSP to into Django Application => #?https://www.digitalocean.com/community/tutorials/how-to-secure-your-django-application-with-a-content-security-policy

#~Enhance Django Security Additional Blogs
#https://www.django-cms.org/en/blog/2022/02/22/security-enhancements-for-django-cms/